/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "ALPHAS";
// -----------------------------------------------------------------------------------------
// |  ALT |  K  |  .  |  O   |  ,  |  Y  |   |  V  |  G   |  C   |  L  |  ß  | ALT  |
// |  MO2 |  H  |  A  |  E   |  I  |  U  |   |  D  |  T   |  R   |  N  |  S  | MO2  |
// | SHFT |     |  Q  |  X   |  F  |  Z  |   |  B  |  P   |  W   |  M  |  J  | SHFT |
//                    | CTRL | MO1 | SPC |   | RET | MO1  | CTRL |
                        bindings = <
   &kp LALT  &kp K  &kp DOT &kp O     &kp COMMA &kp Z        &kp V   &kp G &kp C     &kp L &kp MINUS &kp RALT
   &mo 2     &kp H  &kp A   &kp E     &kp I     &kp U        &kp D   &kp T &kp R     &kp N &kp S     &mo 2
   &kp LSHFT &sl 3  &kp Q   &kp X     &kp F     &kp Y        &kp B   &kp P &kp W     &kp M &kp J     &kp RSHFT
                            &kp LCTRL &mo 1     &kp SPACE    &kp RET &mo 1 &kp RCTRL
                        >;
                };

                numnav_layer {
                        label = "NUMNAV";
// -----------------------------------------------------------------------------------------
// |     | PGUP | BCKSPC | UP   | DLT   | PGDWN |   | NEXT |  7  |  8   |  9  | MUTE |     |
// | WIN | HOME | LFT    | DWN  | RGT   | END   |   | PLAY |  4  |  5   |  6  | VOL+ | WIN |
// |     | ESC  | CUT    | COPY | PASTE | TAB   |   | 0    |  1  |  2   |  3  | VOL- |     |
//                       |      |       |       |   |      |     |      |
                        bindings = <
   &trans   &kp PG_UP &kp BSPC  &kp UP    &kp DEL   &kp PG_DN    &kp C_NEXT       &kp N7 &kp N8 &kp N9 &kp C_MUTE   &trans
   &kp LWIN &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT &kp END      &kp C_PLAY_PAUSE &kp N4 &kp N5 &kp N6 &kp C_VOL_UP &kp RWIN
   &trans   &kp ESC   &kp LC(X) &kp LC(C) &kp LC(V) &kp INS      &kp N0           &kp N1 &kp N2 &kp N3 &kp C_VOL_DN &trans
                                &trans    &trans    &trans       &trans           &trans &trans
                        >;
                };

                symbol_layer {
                        label = "SYMBOL";
// -----------------------------------------------------------------------------------------
// |    |  @  |  _  |  [  |  ]  |  ^  |   |  !  |  <  |  >  |  =  |  &  |    |
// |    |  \  |  /  |  {  |  }  |  *  |   |  ?  |  (  |  )  |  -  |  :  |    |
// |    |  #  |  $  |  |  |  ~  |  `  |   |  +  |  %  |  "  |  '  |  ;  |    |
//                  |     |     |     |   |     |     |     |
                        bindings = <
   &trans &kp RA(Q)       &kp LS(FSLH) &kp RA(N8)   &kp RA(N9)   &kp GRAVE     &kp LS(N1)    &kp NON_US_BSLH &kp LS(NON_US_BSLH) &kp LS(N0)          &kp LS(N6)    &trans
   &trans &kp NON_US_BSLH &kp LS(N7)   &kp RA(N7)   &kp RA(N0)   &kp LS(RBKT)  &kp LS(MINUS) &kp LS(N8)      &kp LS(N9)          &kp FSLH            &kp LS(DOT)   &trans
   &trans &kp NON_US_HASH &kp LS(N4)   &kp RA(BSLH) &kp RA(RBKT) &kp LS(EQUAL) &kp RBKT      &kp LS(N5)      &kp LS(N2)          &kp LS(NON_US_HASH) &kp LS(COMMA) &trans
                                       &trans       &trans       &trans        &trans        &trans          &trans
                        >;
                };

                umlaut_layer {
                        label = "UMLAUT";
// -----------------------------------------------------------------------------------------
// |    |     |     |  Ö  |     |     |   |    |    |    |    |    |    |
// |    |     |  Ä  |     |     |  Ü  |   |    |    |    |    |    |    |
// |    |     |     |     |     |     |   |    |    |    |    |    |    |
//                  |     |     |     |   |    |    |    |
                        bindings = <
   &trans &trans &trans      &kp SEMI    &trans &trans      &trans &trans &trans &trans &trans &trans
   &trans &trans &kp SQT     &trans      &trans &kp LBKT    &trans &trans &trans &trans &trans &trans
   &trans &trans &trans      &trans      &trans &trans      &trans &trans &trans &trans &trans &trans
                             &trans      &trans &trans      &trans &trans &trans
                        >;
                };
        };
};
